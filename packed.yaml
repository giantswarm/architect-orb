commands:
    changelog-lint:
        steps:
            - run:
                command: |
                    grep -E -e '^## \[Unreleased\]$' CHANGELOG.md
                name: 'architect/changelog-lint: validate Unreleased header existence'
            - run:
                command: |
                    grep -E -e '^# Changelog$' CHANGELOG.md | tee .lint_changelog_headers_level_1_valid
                name: 'architect/changelog-lint: list valid 1st level headers'
            - run:
                command: |
                    grep -e '^# ' CHANGELOG.md | tee .lint_changelog_headers_level_1_all
                name: 'architect/changelog-lint: list all 1st level headers'
            - run:
                command: |
                    git diff --exit-code --no-index .lint_changelog_headers_level_1_all .lint_changelog_headers_level_1_valid
                name: 'architect/changelog-lint: validate 1st level headers'
            - run:
                command: |
                    grep -E -e '^## \[[0-9]+\.[0-9]+\.[0-9]+\] - 20[0-9]{2}-[0-9]{2}-[0-9]{2}$' -e '^## \[Unreleased\]$' CHANGELOG.md | tee .lint_changelog_headers_level_2_valid
                name: 'architect/changelog-lint: list valid 2nd level headers'
            - run:
                command: |
                    grep -e '^## ' CHANGELOG.md | tee .lint_changelog_headers_level_2_all
                name: 'architect/changelog-lint: list all 2nd level headers'
            - run:
                command: |
                    git diff --exit-code --no-index .lint_changelog_headers_level_2_all .lint_changelog_headers_level_2_valid
                name: 'architect/changelog-lint: validate 2nd level headers'
            - run:
                command: |
                    grep -E '### (Added|Changed|Deprecated|Removed|Fixed|Security)$' CHANGELOG.md | tee .lint_changelog_valid_headers | tee -a .lint_changelog_headers_level_3_valid
                name: 'architect/changelog-lint: list valid 3rd headers'
            - run:
                command: |
                    grep -E -e '^### ' CHANGELOG.md | tee .lint_changelog_headers_level_3_all
                name: 'architect/changelog-lint: list all 3nd level headers'
            - run:
                command: |
                    git diff --exit-code --no-index .lint_changelog_headers_level_3_all .lint_changelog_headers_level_3_valid
                name: 'architect/changelog-lint: validate 3nd level headers'
            - run:
                command: |
                    ! grep -E -e '^####+ ' CHANGELOG.md
                name: 'architect/changelog-lint: validate there are no more headers'
            - run:
                command: |
                    rm -v .lint_changelog_*
                name: 'architect/changelog-lint: cleanup'
    gitleaks:
        parameters:
            config:
                description: (Optional) Path to a config file to use for gitleaks configuration.
                type: string
        steps:
            - run:
                command: |
                    CONFIG="<< parameters.config >>"
                    LINT_ARGS=" "
                    if [ -n "${CONFIG}" ]; then
                      LINT_ARGS+=" --config=${CONFIG}";
                    fi
                    gitleaks $LINT_ARGS --redact -v --pretty -r ./
                name: Check if gitleaks detects any leaked secrets
    go-build:
        parameters:
            binary:
                type: string
            os:
                type: string
            pre_test_target:
                default: ""
                description: |
                    Executes the requested Makefile target before lints and tests. Helpful to generate code in advance.
                type: string
            tags:
                default: ""
                type: string
            test_target:
                default: ""
                description: |
                    Executes the requested Makefile target.
                type: string
        steps:
            - go-test:
                pre_test_target: <<parameters.pre_test_target>>
                test_target: <<parameters.test_target>>
            - run:
                command: |
                    CGO_ENABLED=0 GOOS="<< parameters.os >>" go build -ldflags "$(cat .ldflags)" -tags "<< parameters.tags >>" -o << parameters.binary >> .
                name: Build binaries
            - run:
                command: |
                    [[ "<< parameters.os >>" == "linux" ]] && ./<< parameters.binary >> version || true
                name: Execute version command of built binary (Linux only)
    go-cache-restore:
        steps:
            - restore_cache:
                keys:
                    - go-build-go-mod-v1-{{ checksum "go.sum" }}
    go-cache-save:
        steps:
            - save_cache:
                key: go-build-go-mod-v1-{{ checksum "go.sum" }}
                paths:
                    - /go/pkg/mod
    go-test:
        parameters:
            pre_test_target:
                default: ""
                description: |
                    Executes the requested Makefile target before lints and tests. Helpful to generate code in advance.
                type: string
            test_target:
                default: ""
                description: |
                    Executes the requested Makefile target.
                type: string
        steps:
            - when:
                condition: <<parameters.pre_test_target>>
                steps:
                    - run:
                        command: |
                            CGO_ENABLED=0 make <<parameters.pre_test_target>>
                        name: Run pre-test Makefile target
            - run:
                command: |
                    go mod tidy && git diff --exit-code
                name: Check if go.mod and go.sum are clean
            - run:
                command: |
                    echo -n "-w -linkmode 'auto' -extldflags '-static'" > .ldflags

                    # buildTimestamp
                    echo -n " -X '$(go list .)/pkg/project.buildTimestamp=$(date --utc '+%FT%TZ')'" >> .ldflags

                    # Commit SHA
                    echo -n " -X '$(go list .)/pkg/project.gitSHA=${CIRCLE_SHA1}'" >> .ldflags

                    # Print content
                    echo "\"$(cat .ldflags)\""
                name: Create ldflags file
            - run:
                command: |
                    go install golang.org/x/tools/cmd/goimports@latest && if [[ -n $(goimports -local github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} -l .) ]]; then goimports -local github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} -d . && exit 1; fi
                name: Check if imports are properly sorted
            - run:
                command: |
                    test -z $(gofmt -l .) || gofmt -d .
                name: Check if code structure differs from gofmt's
            - run:
                command: |
                    CGO_ENABLED=0 go vet ./...
                name: Check if go vet has any complaints
            - run:
                command: |
                    CGO_ENABLED=0 golangci-lint run -E gosec -E goconst --timeout 10m --max-same-issues 0
                name: Check if golangci-lint has any complaints
            - run:
                command: |
                    set +e
                    CGO_ENABLED=0 go list -json -deps ./... | nancy sleuth --skip-update-check --quiet --exclude-vulnerability-file ./.nancy-ignore --additional-exclude-vulnerability-files ./.nancy-ignore.generated 2>&1 | tee ./nancy-results.txt ; nancy_result=(${PIPESTATUS[1]})
                    grep -q 'error accessing OSS Index' nancy-results.txt; grep_result=$?
                    set -e
                    # If nancy gave us a bad exit code AND grep found an OSS index error in the output, then we don't fail the build.
                    if [[ $nancy_result -ne 0 && $grep_result -eq 0 ]]; then
                      echo Ignoring failed scan due to problem with the external scanner.
                      exit 0
                    fi
                    exit $nancy_result
                name: Check if dependencies have known security vulnerabilities
            - when:
                condition: <<parameters.test_target>>
                steps:
                    - run:
                        command: |
                            CGO_ENABLED=0 make <<parameters.test_target>>
                        name: Run unit tests via Makefile target
            - unless:
                condition: <<parameters.test_target>>
                steps:
                    - run:
                        command: |
                            CGO_ENABLED=0 go test -ldflags "$(cat .ldflags)" ./...
                        name: Run unit tests
    helm-chart-template:
        parameters:
            chart:
                type: string
        steps:
            - run:
                command: |
                    [ ! -z $CIRCLE_TAG ] && echo "skip: not branch build" && exit 0
                    architect helm template --validate --dir ./helm/<<parameters.chart>>
                name: 'architect/helm-chart-template: Template chart for branch build'
            - run:
                command: |
                    [ -z $CIRCLE_TAG ] && echo "skip: not tag build" && exit 0
                    architect helm template --validate --tag-build --dir ./helm/<<parameters.chart>>
                name: 'architect/helm-chart-template: Template chart for tag build'
    helm-conftest:
        description: Test conftest policies
        parameters:
            chart:
                type: string
        steps:
            - run:
                command: |
                    sha=4885005d95418aa13a578fe9de232808d1b3adcd
                    policies=$(echo https://raw.githubusercontent.com/swade1987/deprek8ion/${sha}/policies/kubernetes-{1.16,1.17,1.18,1.19,1.20,1.22}.rego | tr ' ' ',')
                    policies="${policies},https://raw.githubusercontent.com/swade1987/deprek8ion/${sha}/policies/_cert-manager.rego"
                    policies="${policies},https://raw.githubusercontent.com/swade1987/deprek8ion/${sha}/policies/_service-account.rego"

                    if [ -d "helm/<<parameters.chart>>/ci" ]; then
                      for t in $(ls helm/<<parameters.chart>>/ci/*.yaml); do helm template --values $t helm/<<parameters.chart>> | conftest test --update "${policies}" - ; done
                    else
                      helm template helm/<<parameters.chart>> | conftest test --update "${policies}" -
                    fi
                name: Test conftest policies
    helm-lint:
        description: Lint Helm chart
        parameters:
            chart:
                type: string
            ct_config:
                default: ""
                description: Chart Testing Config file path
                type: string
        steps:
            - run:
                command: |
                    ct lint <<# parameters.ct_config >> --config << parameters.ct_config >> <</ parameters.ct_config >> --validate-maintainers=false --charts="helm/<<parameters.chart>>"
                name: Lint
    image-build-with-docker:
        parameters:
            build-context:
                default: .
                type: string
            dockerfile:
                default: ./Dockerfile
                type: string
        steps:
            - run:
                command: |
                    docker build -f "<<parameters.dockerfile>>" "<<parameters.build-context>>" --progress plain 2>&1 | tee .docker.log
                name: Build the container image using 'docker build'
            - run:
                command: |
                    awk -F" " '/^#[0-9]+ writing image sha256:[0-9a-f]{40}/ {print $4;exit}' .docker.log | tee .image_sha256
                    echo 'export DOCKER_IMAGE_SHA256=$(cat .image_sha256)' >> $BASH_ENV
                name: Save container image SHA256 to temp file
    image-login-to-registries:
        parameters:
            registries-data:
                default: ""
                description: |
                    A string that defines configuration for registries
                    Each line describes one registry using the following format

                    visibility registry username_envvar password_envvar push_dev_image

                    where

                    access is one of ("public" "private" "public/private")
                    registry is a string containing registry url
                    username_envvar is a string containing the name of an env var with a username
                    password_envvar is as string containing the name of an env var with a password
                    push_dev is boolean, when true, dev images are uploaded to registries
                type: string
        steps:
            - run:
                command: |
                    set -x

                    if [[ "<<parameters.registries-data>>" ]]; then
                      REGISTRIES_DATA="<<parameters.registries-data>>";
                    else
                      echo "Using registries data from the circle.ci environment settings.";
                      if ! [[ "${REGISTRIES_DATA_BASE64}" ]]; then
                        echo "Environment variable REGISTRIES_DATA_BASE64 is not set properly in circleci's context."
                        exit 1
                      fi
                      REGISTRIES_DATA=$(echo $REGISTRIES_DATA_BASE64 | base64 -d)
                    fi

                    echo "${REGISTRIES_DATA}" > .registries_data

                    cat .registries_data | while read -r _ reg username password _; do
                      CMD="docker login $reg --username '${!username}' --password '${!password}'"
                      for i in {1..3}; do [[ $i -gt 1 ]] && sleep 1;  bash -c "${CMD}" && s=0 && break || s=$?; done; (exit $s)
                    done
                name: Login to registries
    image-prepare-tag:
        parameters:
            tag-suffix:
                default: ""
                type: string
        steps:
            - run:
                command: |
                    echo -n "$(architect project version)<<parameters.tag-suffix>>" | tee .docker_image_tag
                    echo 'export DOCKER_IMAGE_TAG=$(cat .docker_image_tag)' >> $BASH_ENV
                name: Generate container tag from 'architect project version' and tag-suffix parameter
    image-push-to-registries:
        parameters:
            build-context:
                default: .
                type: string
            dockerfile:
                default: ./Dockerfile
                type: string
            force-public:
                default: false
                type: boolean
            image:
                type: string
            image-sha256_envvar:
                type: env_var_name
            registries-data:
                default: ""
                description: |
                    A string that defines configuration for registries
                    Each line describes one registry using the following format

                    visibility registry username_envvar password_envvar push_dev_image

                    where

                    access is one of ("public" "private" "public/private")
                    registry is a string containing registry url
                    username_envvar is a string containing the name of an env var with a username
                    password_envvar is as string containing the name of an env var with a password
                    push_dev is boolean, when true, dev images are uploaded to registries
                type: string
            tag-latest-branch:
                type: string
            tag-suffix:
                default: ""
                type: string
            tag_envvar:
                type: env_var_name
        steps:
            - run:
                command: |
                    # If image is forced to be pushed as a public one,
                    # we shouldn't check whether the source is public
                    # if repo is private, push to private only
                    # if repo is public or force-public is set push to public only
                    if [[ "<< parameters.force-public >>" = "true" ]]; then
                      IMAGE_ACCESS=public
                    else
                      GITHUB_API_URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
                      GITHUB_MESSAGE=$(curl -sL -H "Accept: application/vnd.github+json" -H "X-Github-Api-Version: 2022-11-28" "${GITHUB_API_URL}" | jq -r '.message')
                      if [[ "${GITHUB_MESSAGE}" = "Not Found" ]]; then
                        echo -e "The GitHub repository is not detected as public, treating the image as a private one.\n"
                        IMAGE_ACCESS=private
                      else
                        echo -e "The GitHub repository is detected as public, treating the image as a public one.\n"
                        IMAGE_ACCESS=public
                      fi
                    fi

                    if ! [[ -f .registries_data ]]; then
                      if [[ "<<parameters.registries-data>>" ]]; then
                        REGISTRIES_DATA="<<parameters.registries-data>>";
                      else
                        echo "Using registries data from the circle.ci environment settings.";
                        if ! [[ "${REGISTRIES_DATA_BASE64}" ]]; then
                          echo "Environment variable REGISTRIES_DATA_BASE64 is not set properly in circleci's context."
                          exit 1
                        fi
                        REGISTRIES_DATA=$(echo $REGISTRIES_DATA_BASE64 | base64 -d)
                      fi

                      echo "${REGISTRIES_DATA}" > .registries_data
                    fi

                    cat .registries_data | while read -r access reg _ _ push_dev; do
                      echo -e "\nProcessing image push config for registry ${reg}."
                      if [[ "${push_dev}" == "false" ]] && [[ "${DOCKER_IMAGE_TAG}" =~ [a-f0-9]{40} ]]; then
                        echo "Not uploading image with tag ${DOCKER_IMAGE_TAG}, as  'push-dev' is 'false'"
                        continue
                      fi
                      if [[ "${access}" == *"${IMAGE_ACCESS}"* ]]; then
                        echo "Tag the image for ${reg}"
                        docker tag "${<<parameters.image-sha256_envvar>>}" "${reg}/<<parameters.image>>:${<<parameters.tag_envvar>>}"
                        echo "Pushing image with SHA256 ${<<parameters.image-sha256_envvar>>} as ${reg}/<<parameters.image>>:${<<parameters.tag_envvar>>}"
                        CMD="docker push \"${reg}/<<parameters.image>>:${<<parameters.tag_envvar>>}\""
                        #for i in {1..3}; do
                        #eval "${CMD}" && s=0 && break || IMAGES_FAILED="${reg}-${REGISTRIES_FAILED}";
                        SUCCESS=false
                        for i in $(seq 1 4); do
                          echo "attempt: ${i}"
                          if bash -c "${CMD}"; then
                            echo "Image is pushed to the registry."
                            SUCCESS=true
                            break
                          fi
                          echo "Waiting 5 seconds before the next attempt."
                          sleep 5
                        done
                        if [[ "${SUCCESS}" == "false" ]]; then
                          echo "${reg}:${<< parameters.tag_envvar >>}" >> .failed_images
                        fi
                        if [[ "<<parameters.tag-latest-branch>>" == "${CIRCLE_BRANCH}" ]]; then
                          echo "Tagging the image as 'latest'"
                          docker tag "${<<parameters.image-sha256_envvar>>}" "${reg}/<<parameters.image>>:latest<<parameters.tag-suffix>>"
                          CMD="docker push \"${reg}/<<parameters.image>>:latest<<parameters.tag-suffix>>\""
                          #for i in {1..3}; do [[ $i -gt 1 ]] && sleep 1;  eval "${CMD}" && s=0 && break || IMAGES_FAILED="${reg} ${REGISTRIES_FAILED}"; done;
                          SUCCESS=false
                          for x in $(seq 1 10); do
                            echo "attempt: ${x}"
                            if bash -c "${CMD}"; then
                              echo "Image is pushed to the registry."
                              SUCCESS=true
                              break
                            fi
                            echo "Waiting 5 seconds before the next attempt."
                            sleep 5
                          done
                          if [[ "${SUCCESS}" == "false" ]]; then
                            echo "${reg}:latest<< parameters.tag-suffix >>" >> .failed_images
                          fi
                        fi
                      else
                        echo "Registry ${reg} is not configured for ${IMAGE_ACCESS} images, skipping"
                      fi
                    done
                    if [ -f .failed_images ]; then
                      echo "Some images couldn't be pushed, check: $(cat .failed_images)"
                      exit 1
                    fi
                name: Push image to registries
    integration-test-create-cluster:
        parameters:
            kind-config:
                type: string
            kubernetes-version:
                type: string
        steps:
            - when:
                condition: << parameters.kind-config >>
                steps:
                    - run:
                        command: |
                            cp << parameters.kind-config >> kind-config
                        name: 'architect/integration-test-create-cluster: Move kind config'
            - unless:
                condition: << parameters.kind-config >>
                steps:
                    - run:
                        command: |
                            printf "kind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\n" > kind-config
                        name: 'architect/integration-test-create-cluster: Prepare default kind config'
            - run:
                command: |
                    ret=1
                    tries=4
                    for i in $(seq 1 $tries) ; do
                      echo "====> Attempt $i: Creating kind cluster"
                      set +e
                      kind create cluster --config kind-config --image gsoci.azurecr.io/giantswarm/kind-node:<< parameters.kubernetes-version >>
                      ret=$?
                      set -e
                      [[ $ret -eq 0 ]] && exit $ret
                      sleep 5
                      kind delete cluster || true
                    done
                name: 'architect/integration-test-create-cluster: Create cluster'
    integration-test-export-logs:
        steps:
            - run:
                command: |
                    kind export logs ./kind/logs
                name: 'architect/integration-test-export-logs: Export cluster logs'
                when: always
            - store_artifacts:
                destination: logs
                path: ./kind/logs
    integration-test-go-test:
        parameters:
            env-file:
                type: string
            test-dir:
                type: string
            test-timeout:
                type: string
        steps:
            - when:
                condition: << parameters.env-file >>
                steps:
                    - run:
                        command: |
                            cat << parameters.env-file >> | sed -e 's/^\(.\)/export \1/' | tee .env
                        name: 'architect/integration-test-go-test: Process .env file'
            - unless:
                condition: << parameters.env-file >>
                steps:
                    - run:
                        command: |
                            touch .env
                        name: 'architect/integration-test-go-test: Prepare empty .env file'
            - run:
                command: |
                    source .env && CGO_ENABLED=0 E2E_KUBECONFIG=~/.kube/config go test -tags k8srequired -timeout << parameters.test-timeout >> -v ./<< parameters.test-dir >>
                name: 'architect/integration-test-go-test: Run test'
    integration-test-install-app-platform:
        parameters:
            install-app-platform:
                type: boolean
        steps:
            - when:
                condition: << parameters.install-app-platform >>
                steps:
                    - run:
                        command: |
                            apptestctl bootstrap --kubeconfig="$(kind get kubeconfig)"
                        name: 'architect/integration-test-install-app-platform: Run apptestctl bootstrap'
    integration-test-install-tools:
        parameters:
            apptestctl-version:
                type: string
            helm-version:
                type: string
            kubernetes-version:
                type: string
        steps:
            - run:
                command: |
                    curl -Lo ./kind "https://kind.sigs.k8s.io/dl/v0.11.0/kind-$(uname)-amd64"
                    chmod +x ./kind
                    sudo mv ./kind /usr/local/bin
                name: 'architect/integration-test-install-tools: Install kind'
            - run:
                command: |
                    curl -LO https://storage.googleapis.com/kubernetes-release/release/<< parameters.kubernetes-version >>/bin/linux/amd64/kubectl
                name: 'architect/integration-test-install-tools: Download kubectl'
            - run:
                command: |
                    chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
                name: 'architect/integration-test-install-tools: Install kubectl'
            - run:
                command: |
                    kubectl version --client
                name: 'architect/integration-test-install-tools: Check kubectl version'
            - run:
                command: |
                    curl -L https://get.helm.sh/helm-<< parameters.helm-version >>-linux-amd64.tar.gz >./helm.tar.gz
                    tar xzvf helm.tar.gz
                    chmod u+x linux-amd64/helm
                    sudo mv linux-amd64/helm /usr/local/bin/
                name: 'architect/integration-test-install-tools: Install Helm'
            - run:
                command: |
                    curl -L https://github.com/giantswarm/apptestctl/releases/download/<< parameters.apptestctl-version >>/apptestctl-<< parameters.apptestctl-version >>-linux-amd64.tar.gz > ./apptestctl.tar.gz
                    tar xzvf apptestctl.tar.gz
                    chmod u+x apptestctl-<< parameters.apptestctl-version >>-linux-amd64/apptestctl
                    sudo mv apptestctl-<< parameters.apptestctl-version >>-linux-amd64/apptestctl /usr/local/bin
                name: 'architect/integration-test-install-tools: Install apptestctl'
    integration-test-setup:
        parameters:
            setup-script:
                type: string
        steps:
            - when:
                condition: << parameters.setup-script >>
                steps:
                    - run:
                        command: |
                            chmod 700 << parameters.setup-script >>
                        name: 'architect/integration-test-setup: Make script executable'
                    - run:
                        command: |
                            cat << parameters.setup-script >>
                        name: 'architect/integration-test-setup: Output test setup commands'
                    - run:
                        command: |
                            ./<< parameters.setup-script >>
                        name: 'architect/integration-test-setup: Run test setup commands'
    kat-tests-install-tools:
        parameters:
            helm-version:
                default: 2.17.0
                type: string
            kind-version:
                default: 0.7.0
                type: string
            kube-app-testing-version:
                default: v0.5.2
                type: string
            kubectl-version:
                default: 1.18.0
                type: string
        steps:
            - restore_cache:
                key: v2-python-cache-{{ checksum "test/kat/Pipfile.lock" }}
            - run:
                command: |
                    curl -Lo /tmp/kube-app-testing.sh -q https://raw.githubusercontent.com/giantswarm/kube-app-testing/<< parameters.kube-app-testing-version >>/kube-app-testing.sh
                    chmod +x /tmp/kube-app-testing.sh
                name: download kat script
            - run:
                command: |
                    mkdir /tmp/bin || true
                name: create temporary bin dir /tmp/bin
            - restore_cache:
                key: bin-<< parameters.kube-app-testing-version >>-<< parameters.kind-version >>-<< parameters.helm-version >>-<< parameters.kubectl-version >>
            - run:
                command: |
                    if [[ ! -f /tmp/bin/kind ]]; then curl -Lo /tmp/bin/kind "https://github.com/kubernetes-sigs/kind/releases/download/v<< parameters.kind-version >>/kind-$(uname)-amd64" && chmod +x /tmp/bin/kind; fi
                name: install kind
            - run:
                command: |
                    if [[ ! -f /tmp/bin/helm ]]; then curl -Lo /tmp/helm.tar.gz https://get.helm.sh/helm-v<< parameters.helm-version >>-linux-amd64.tar.gz && tar zxf /tmp/helm.tar.gz -C /tmp && mv /tmp/linux-amd64/helm /tmp/bin/helm; fi
                name: install helm
            - run:
                command: |
                    if [[ ! -f /tmp/bin/kubectl ]]; then curl -Lo /tmp/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v<< parameters.kubectl-version >>/bin/linux/amd64/kubectl && chmod +x /tmp/bin/kubectl; fi
                name: install kubectl
            - save_cache:
                key: bin-<< parameters.kube-app-testing-version >>-<< parameters.kind-version >>-<< parameters.helm-version >>-<< parameters.kubectl-version >>
                paths:
                    - /tmp/bin
    kat-tests-run:
        parameters:
            additional_kube-app-testing_flags:
                default: ""
                type: string
            chart:
                type: string
            cluster_type:
                type: string
            ct_config:
                default: ""
                type: string
        steps:
            - run:
                command: |
                    PATH="/tmp/bin:$PATH" /tmp/kube-app-testing.sh -t << parameters.cluster_type >> -c << parameters.chart >> << parameters.additional_kube-app-testing_flags >>
                environment:
                    CT_CONFIG_FILE: << parameters.ct_config >>
                name: start kube-app-testing tool
            - run:
                command: |
                    if [[ -d /tmp/kat ]]; then sudo chown -R circleci.circleci /tmp/kat; fi
                name: ""
            - save_cache:
                key: v2-python-cache-{{ checksum "test/kat/Pipfile.lock" }}
                paths:
                    - /tmp/kat/.local
                    - /tmp/kat/.cache
            - store_test_results:
                path: test-results
            - store_artifacts:
                path: test-results
    kubeconform:
        description: Validate Kubernetes resources.
        parameters:
            chart:
                type: string
        steps:
            - run:
                command: |
                    for v in $KUBERNETES_VERSIONS; do
                      echo "Validating against kubernetes version $v"
                      if [ -d "helm/<<parameters.chart>>/ci" ]; then
                        for t in $(ls helm/<<parameters.chart>>/ci/*.yaml); do
                          helm template --values $t helm/<<parameters.chart>> | kubeconform --schema-location default --schema-location "${GS_SCHEMA_REPOSITORY}/{{ .ResourceKind }}{{ .KindSuffix }}.json" --ignore-missing-schemas --kubernetes-version $v -
                        done
                      else
                        helm template helm/<<parameters.chart>> | kubeconform --schema-location default --schema-location "${GS_SCHEMA_REPOSITORY}/{{ .ResourceKind }}{{ .KindSuffix }}.json" --ignore-missing-schemas --kubernetes-version $v -
                      fi
                    done
                environment:
                    GS_SCHEMA_REPOSITORY: https://raw.githubusercontent.com/giantswarm/json-schema/main/master
                    KUBERNETES_VERSIONS: 1.20.0 1.21.0 1.22.0 1.23.0 1.24.0
                name: kubeconform
    machine-install-go:
        parameters:
            archive_sha:
                default: 1241381b2843fae5a9707eec1f8fb2ef94d827990582c7c7c32f5bdfbfd420c8
                type: string
            go_version:
                default: 1.21.3
                type: string
        steps:
            - run:
                command: |
                    sudo rm -rf /usr/local/go
                name: 'architect/machine-install-go: Remove old Go'
            - run:
                command: |
                    wget https://go.dev/dl/go<< parameters.go_version >>.linux-amd64.tar.gz
                name: 'architect/machine-install-go: Download Go'
            - run:
                command: |
                    [[ "$(sha256sum go<< parameters.go_version >>.linux-amd64.tar.gz | cut -d ' ' -f 1)" == "<< parameters.archive_sha >>" ]]
                name: 'architect/machine-install-go: Check downloaded Go checksum'
            - run:
                command: |
                    sudo tar -C /usr/local -xzf go<< parameters.go_version >>.linux-amd64.tar.gz
                name: 'architect/machine-install-go: Install Go'
            - run:
                command: |
                    go env -w GOBIN=/home/circleci/.go_workspace/bin
                name: 'architect/machine-install-go: Set Go environment'
            - run:
                command: |
                    rm go<< parameters.go_version >>.linux-amd64.tar.gz
                name: 'architect/machine-install-go: Remove downloaded Go files'
            - run:
                command: |
                    go version
                name: 'architect/machine-install-go: Check Go version'
    package-and-push-git:
        parameters:
            app_catalog:
                type: string
            app_catalog_test:
                type: string
            chart:
                type: string
            explicit_allow_chart_name_mismatch:
                default: false
                description: |
                    If 'explicit_allow_chart_name_mismatch' is set to true, the name of the chart can be anything.
                    Otherwise the name set in the 'chart' parameter must start with the repository name and optionally continue with '-app'.
                type: boolean
            on_tag:
                default: true
                description: |
                    When this is `false`, commits to `master` will be pushed to `app_catalog` instead of `app_catalog_test`.
                    Set this to `false` for deployments that follow a a master branch for production releases rather than
                    using tags (the default).
                type: boolean
            persist_chart_archive:
                default: false
                description: |
                    When this is `true`, the packaged chart archive will be persisted to the workspace.
                    Set this to `true`, if you're planning to execute tests using app-test-suite.
                type: boolean
        steps:
            - when:
                condition: << parameters.on_tag >>
                steps:
                    - run:
                        command: |
                            [ -z ${CIRCLE_TAG} ] && echo -n '<< parameters.app_catalog_test >>' | tee .app_catalog_name || echo -n '<< parameters.app_catalog >>' | tee .app_catalog_name
                        name: 'architect/package-and-push-git: Determine target app catalog based on presence of tag'
            - unless:
                condition: << parameters.on_tag >>
                steps:
                    - run:
                        command: |
                            [[ ${CIRCLE_BRANCH} == master ]] && echo -n '<< parameters.app_catalog >>' | tee .app_catalog_name || echo -n '<< parameters.app_catalog_test >>' | tee .app_catalog_name
                        name: 'architect/package-and-push-git: Determine target app catalog based on branch name'
            - unless:
                condition: << parameters.explicit_allow_chart_name_mismatch >>
                steps:
                    - run:
                        command: |
                            CHART_NAME="<< parameters.chart >>"
                            [[ ${CHART_NAME%-app} == ${CIRCLE_PROJECT_REPONAME%-app} ]] && exit 0 || echo "chart parameter value should match ${CIRCLE_PROJECT_REPONAME%-app} or ${CIRCLE_PROJECT_REPONAME%-app}-app" ; exit 1
                        name: Verify chart parameters
            - run:
                command: |
                    git clone -q --depth=1 --single-branch "git@github.com:giantswarm/$(cat .app_catalog_name).git" .app_catalog
                name: Clone app catalog repo
            - run:
                command: |
                    mkdir build && helm package ./helm/<< parameters.chart >> --destination ./build
                name: Package the chart archive
            - when:
                condition: << parameters.persist_chart_archive >>
                steps:
                    - persist_to_workspace:
                        paths:
                            - << parameters.chart >>*.tgz
                        root: build
            - run:
                command: |
                    readonly app_catalog_name="$(cat .app_catalog_name)"

                    cd .app_catalog

                    readonly head="$(git rev-parse HEAD)"

                    ret=1
                    tries=4
                    for i in $(seq 1 $tries) ; do
                      echo "====> Attempt $i: Running: git reset --hard \$head"
                      git reset --hard $head

                      echo "====> Attempt $i: Running: git pull --rebase"
                      git pull --rebase

                      echo "====> Attempt $i: Running: helm repo index --url https://giantswarm.github.io/$app_catalog_name --merge index.yaml ../build"
                      helm repo index --url https://giantswarm.github.io/$app_catalog_name --merge index.yaml ../build

                      echo "====> Attempt $i: Running: cp ../build/* ."
                      cp ../build/* .

                      echo "====> Attempt $i: Running: git add -A"
                      git add -A

                      echo "====> Attempt $i: Running: git commit -m \"add $(git status --porcelain | cut -c4- | grep << parameters.chart >>)\""
                      git commit -m "add $(git status --porcelain | cut -c4- | grep << parameters.chart >>)"

                      echo "====> Attempt $i: Running \"git push\""
                      set +e
                      git push
                      ret=$?
                      set -e

                      [[ $ret -eq 0 ]] && exit $ret

                      sleep 5
                    done

                    echo "Giving up after $tries failures." >&2
                    echo "Error pushing changes. See known errors in:" >&2
                    echo "https://github.com/giantswarm/architect-orb/blob/master/README.md#push-to-app-catalog" >&2

                    exit $ret
                name: Push chart archive to app catalog repo
    package-and-push-git-with-abs:
        parameters:
            app_catalog:
                type: string
            app_catalog_test:
                type: string
            chart:
                type: string
            explicit_allow_chart_name_mismatch:
                default: false
                description: |
                    If 'explicit_allow_chart_name_mismatch' is set to true, the name of the chart can be anything.
                    Otherwise the name set in the 'chart' parameter must start with the repository name and optionally continue with '-app'.
                type: boolean
            on_tag:
                default: true
                description: |
                    When this is `false`, commits to `master` will be pushed to `app_catalog` instead of `app_catalog_test`.
                    Set this to `false` for deployments that follow a a master branch for production releases rather than
                    using tags (the default).
                type: boolean
            persist_chart_archive:
                default: false
                description: |
                    When this is `true`, the packaged chart archive will be persisted to the workspace.
                    Set this to `true`, if you're planning to execute tests using app-test-suite.
                type: boolean
            skip_conftest_deprek8ion:
                default: false
                description: |
                    When this is `true`, checking for deprecated manifest versions will be skipped.
                type: boolean
        steps:
            - when:
                condition: << parameters.on_tag >>
                steps:
                    - run:
                        command: |
                            [ -z ${CIRCLE_TAG} ] && echo -n '<< parameters.app_catalog_test >>' | tee .app_catalog_name || echo -n '<< parameters.app_catalog >>' | tee .app_catalog_name
                        name: 'architect/package-and-push-git-with-abs: Determine target app catalog based on presence of tag'
            - unless:
                condition: << parameters.on_tag >>
                steps:
                    - run:
                        command: |
                            [[ ${CIRCLE_BRANCH} == master ]] && echo -n '<< parameters.app_catalog >>' | tee .app_catalog_name || echo -n '<< parameters.app_catalog_test >>' | tee .app_catalog_name
                        name: 'architect/package-and-push-git-with-abs: Determine target app catalog based on branch name'
            - unless:
                condition: << parameters.explicit_allow_chart_name_mismatch >>
                steps:
                    - run:
                        command: |
                            CHART_NAME="<< parameters.chart >>"
                            [[ ${CHART_NAME%-app} == ${CIRCLE_PROJECT_REPONAME%-app} ]] && exit 0 || echo "chart parameter value should match ${CIRCLE_PROJECT_REPONAME%-app} or ${CIRCLE_PROJECT_REPONAME%-app}-app" ; exit 1
                        name: Verify chart parameters
            - run:
                command: |
                    mkdir build && python -m app_build_suite --chart-dir ./helm/<< parameters.chart >> --destination build --generate-metadata --catalog-base-url "https://giantswarm.github.io/$(cat .app_catalog_name)/" --keep-chart-changes
                name: Execute App Build Suite
            - when:
                condition: << parameters.persist_chart_archive >>
                steps:
                    - persist_to_workspace:
                        paths:
                            - << parameters.chart >>*.tgz
                        root: build
            - unless:
                condition: << parameters.skip_conftest_deprek8ion >>
                steps:
                    - helm-conftest:
                        chart: << parameters.chart >>
            - run:
                command: |
                    git clone -q --depth=1 --single-branch "git@github.com:giantswarm/$(cat .app_catalog_name).git" .app_catalog
                name: Clone app catalog repo
            - run:
                command: |
                    readonly app_catalog_name="$(cat .app_catalog_name)"

                    cd .app_catalog

                    readonly head="$(git rev-parse HEAD)"

                    ret=1
                    tries=4
                    for i in $(seq 1 $tries) ; do
                      echo "====> Attempt $i: Running: git reset --hard \$head"
                      git reset --hard $head

                      echo "====> Attempt $i: Running: git pull --rebase"
                      git pull --rebase

                      echo "====> Attempt $i: Running: helm repo index --url https://giantswarm.github.io/$app_catalog_name --merge index.yaml ../build"
                      helm repo index --url https://giantswarm.github.io/$app_catalog_name --merge index.yaml ../build

                      echo "====> Attempt $i: Running: cp ../build/* ."
                      cp -r ../build/* .

                      echo "====> Attempt $i: Running: git add -A"
                      git add -A

                      echo "====> Attempt $i: Running: git commit -m \"add $(git status --porcelain | cut -c4- | grep << parameters.chart >>)\""
                      git commit -m "add $(git status --porcelain | cut -c4- | grep << parameters.chart >>)"

                      echo "====> Attempt $i: Running \"git push\""
                      set +e
                      git push
                      ret=$?
                      set -e

                      [[ $ret -eq 0 ]] && exit $ret

                      sleep 5
                    done

                    echo "Giving up after $tries failures." >&2
                    echo "Error pushing changes. See known errors in:" >&2
                    echo "https://github.com/giantswarm/architect-orb/blob/master/README.md#push-to-app-catalog" >&2

                    exit $ret
                name: Push chart archive to app catalog repo
    package-and-push-oci:
        parameters:
            app_catalog:
                type: string
            app_catalog_test:
                type: string
            chart:
                type: string
            explicit_allow_chart_name_mismatch:
                default: false
                description: |
                    If 'explicit_allow_chart_name_mismatch' is set to true, the name of the chart can be anything.
                    Otherwise the name set in the 'chart' parameter must start with the repository name and optionally continue with '-app'.
                type: boolean
            on_tag:
                default: true
                description: |
                    When this is `false`, commits to `master` will be pushed to `app_catalog` instead of `app_catalog_test`.
                    Set this to `false` for deployments that follow a a master branch for production releases rather than
                    using tags (the default).
                type: boolean
            password_envar:
                default: AZURE_CLIENTSECRET
                type: string
            persist_chart_archive:
                default: false
                description: |
                    When this is `true`, the packaged chart archive will be persisted to the workspace.
                    Set this to `true`, if you're planning to execute tests using app-test-suite.
                type: boolean
            registry_url:
                default: giantswarmpublic.azurecr.io
                type: string
            username_envar:
                default: AZURE_CLIENTID
                type: string
        steps:
            - when:
                condition: << parameters.on_tag >>
                steps:
                    - run:
                        command: |
                            [ -z ${CIRCLE_TAG} ] && echo -n '<< parameters.app_catalog_test >>' | tee .app_catalog_name || echo -n '<< parameters.app_catalog >>' | tee .app_catalog_name
                            echo -n ${CIRCLE_TAG} | tee .reference
                        name: 'architect/package-and-push-oci: Determine target app catalog based on presence of tag'
            - unless:
                condition: << parameters.on_tag >>
                steps:
                    - run:
                        command: |
                            [[ ${CIRCLE_BRANCH} == master ]] && echo -n '<< parameters.app_catalog >>' | tee .app_catalog_name || echo -n '<< parameters.app_catalog_test >>' | tee .app_catalog_name
                            echo -n ${CIRCLE_SHA1} | tee .reference
                        name: 'architect/package-and-push-oci: Determine target app catalog based on branch name'
            - unless:
                condition: << parameters.explicit_allow_chart_name_mismatch >>
                steps:
                    - run:
                        command: |
                            CHART_NAME="<< parameters.chart >>"
                            [[ ${CHART_NAME%-app} == ${CIRCLE_PROJECT_REPONAME%-app} ]] && exit 0 || echo "chart parameter value should match ${CIRCLE_PROJECT_REPONAME%-app} or ${CIRCLE_PROJECT_REPONAME%-app}-app" ; exit 1
                        name: Verify chart parameters
            - run:
                command: |
                    mkdir -p build && helm package ./helm/<< parameters.chart >> --destination ./build
                name: Package the chart archive
            - when:
                condition: << parameters.persist_chart_archive >>
                steps:
                    - persist_to_workspace:
                        paths:
                            - << parameters.chart >>*.tgz
                        root: build
            - run:
                command: |
                    helm registry login << parameters.registry_url >> --username "${<< parameters.username_envar >>}" --password "${<< parameters.password_envar >>}"
                name: 'architect/package-and-push-oci: Authenticate to the OCI registry'
            - run:
                command: |
                    readonly app_catalog_name="oci://<< parameters.registry_url >>/$(cat .app_catalog_name)/"
                    readonly reference="$(cat .reference)"

                    ret=1
                    tries=4
                    for i in $(seq 1 $tries) ; do
                      echo "====> Attempt $i: Running: helm push build/*.tgz $app_catalog_name"
                      set +e
                      helm push build/*.tgz $app_catalog_name
                      ret=$?
                      set -e

                      [[ $ret -eq 0 ]] && exit $ret

                      sleep 5
                    done

                    echo "Giving up after $tries failures." >&2
                    echo "Error pushing changes. See known errors in:" >&2
                    echo "https://github.com/giantswarm/architect-orb/blob/master/README.md#push-to-app-catalog" >&2

                    exit $ret
                name: Push chart archive to OCI registry app catalog
    package-and-push-oci-with-abs:
        parameters:
            app_catalog:
                type: string
            app_catalog_test:
                type: string
            chart:
                type: string
            explicit_allow_chart_name_mismatch:
                default: false
                description: |
                    If 'explicit_allow_chart_name_mismatch' is set to true, the name of the chart can be anything.
                    Otherwise the name set in the 'chart' parameter must start with the repository name and optionally continue with '-app'.
                type: boolean
            on_tag:
                default: true
                description: |
                    When this is `false`, commits to `master` will be pushed to `app_catalog` instead of `app_catalog_test`.
                    Set this to `false` for deployments that follow a a master branch for production releases rather than
                    using tags (the default).
                type: boolean
            password_envar:
                default: AZURE_CLIENTSECRET
                type: string
            persist_chart_archive:
                default: false
                description: |
                    When this is `true`, the packaged chart archive will be persisted to the workspace.
                    Set this to `true`, if you're planning to execute tests using app-test-suite.
                type: boolean
            registry_url:
                default: giantswarmpublic.azurecr.io
                type: string
            skip_conftest_deprek8ion:
                default: false
                description: |
                    When this is `true`, checking for deprecated manifest versions will be skipped.
                type: boolean
            username_envar:
                default: AZURE_CLIENTID
                type: string
        steps:
            - when:
                condition: << parameters.on_tag >>
                steps:
                    - run:
                        command: |
                            [ -z ${CIRCLE_TAG} ] && echo -n '<< parameters.app_catalog_test >>' | tee .app_catalog_name || echo -n '<< parameters.app_catalog >>' | tee .app_catalog_name
                            echo -n ${CIRCLE_TAG} | tee .reference
                        name: 'architect/package-and-push-oci-with-abs: Determine target app catalog based on presence of tag'
            - unless:
                condition: << parameters.on_tag >>
                steps:
                    - run:
                        command: |
                            [[ ${CIRCLE_BRANCH} == master ]] && echo -n '<< parameters.app_catalog >>' | tee .app_catalog_name || echo -n '<< parameters.app_catalog_test >>' | tee .app_catalog_name
                            echo -n ${CIRCLE_SHA1} | tee .reference
                        name: 'architect/package-and-push-oci-with-abs: Determine target app catalog based on branch name'
            - unless:
                condition: << parameters.explicit_allow_chart_name_mismatch >>
                steps:
                    - run:
                        command: |
                            CHART_NAME="<< parameters.chart >>"
                            [[ ${CHART_NAME%-app} == ${CIRCLE_PROJECT_REPONAME%-app} ]] && exit 0 || echo "chart parameter value should match ${CIRCLE_PROJECT_REPONAME%-app} or ${CIRCLE_PROJECT_REPONAME%-app}-app" ; exit 1
                        name: Verify chart parameters
            - run:
                command: |
                    mkdir -p build && python -m app_build_suite --chart-dir ./helm/<< parameters.chart >> --destination build --generate-metadata --catalog-base-url "https://giantswarm.github.io/$(cat .app_catalog_name)/" --keep-chart-changes
                name: Execute App Build Suite
            - when:
                condition: << parameters.persist_chart_archive >>
                steps:
                    - persist_to_workspace:
                        paths:
                            - << parameters.chart >>*.tgz
                        root: build
            - unless:
                condition: << parameters.skip_conftest_deprek8ion >>
                steps:
                    - helm-conftest:
                        chart: << parameters.chart >>
            - run:
                command: |
                    helm registry login << parameters.registry_url >> --username "${<< parameters.username_envar >>}" --password "${<< parameters.password_envar >>}"
                name: 'architect/package-and-push-oci-with-abs: Authenticate to the OCI registry'
            - run:
                command: |
                    readonly app_catalog_name="oci://<< parameters.registry_url >>/$(cat .app_catalog_name)/"
                    readonly reference="$(cat .reference)"

                    ret=1
                    tries=4
                    for i in $(seq 1 $tries) ; do
                      echo "====> Attempt $i: Running: helm push build/*.tgz $app_catalog_name"
                      set +e
                      helm push build/*.tgz $app_catalog_name
                      ret=$?
                      set -e

                      [[ $ret -eq 0 ]] && exit $ret

                      sleep 5
                    done

                    echo "Giving up after $tries failures." >&2
                    echo "Error pushing changes. See known errors in:" >&2
                    echo "https://github.com/giantswarm/architect-orb/blob/master/README.md#push-to-app-catalog" >&2

                    exit $ret
                name: Push chart archive to OCI registry app catalog
    prepare-catalogbot-git-ssh:
        steps:
            - run:
                command: |
                    [ ! -z "${CATALOGBOT_SSH_KEY_PRIVATE_BASE64}" ] && exit 0
                    echo "CATALOGBOT_SSH_KEY_PRIVATE_BASE64 env variable must not be empty"
                    exit 1
                name: 'architect/prepare-catalogbot-git-ssh: Check environment variables'
            - run:
                command: |
                    mkdir -p ~/.ssh
                    echo "${CATALOGBOT_SSH_KEY_PRIVATE_BASE64}" | base64 -d > ~/.ssh/id_rsa
                    chmod 0600 ~/.ssh/id_rsa
                    ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
                name: 'architect/prepare-catalogbot-git-ssh: Setup SSH key'
            - run:
                command: |
                    git config --global url."ssh://git@github.com".insteadOf "https://github.com"
                    git config --global gc.auto 0
                    git config --global user.email "catalogbot@giantswarm.io"
                    git config --global user.name "CatalogBot"
                name: 'architect/prepare-catalogbot-git-ssh: Configure git'
    push-to-app-collection:
        description: |
            Generates and adds an App CR to an app-collection. Note: version will be detected automatically by architect.
        parameters:
            app_catalog:
                type: string
            app_collection_repo:
                type: string
            app_name:
                type: string
            app_namespace:
                type: string
            disable_force_upgrade:
                type: boolean
        steps:
            - run:
                command: |
                    architect project version | tee .app_version_in_project
                name: 'architect/push-to-app-collection: Generate version'
            - run:
                command: |
                    architect create fluxgenerator \
                      --name="<<parameters.app_name>>" \
                      --app-name="<<parameters.app_name>>" \
                      --app-version="$(cat .app_version_in_project)" \
                      --app-destination-namespace="<<parameters.app_namespace>>" \
                      --app-catalog="<<parameters.app_catalog>>" \
                      --disable-force-upgrade=<<parameters.disable_force_upgrade>> \
                      -o yaml | tee .fluxgenerator.yaml
                name: 'architect/push-to-app-collection: Generate Flux Generator'
            - run:
                command: |
                    git clone -q --depth=1 --single-branch git@github.com:giantswarm/<<parameters.app_collection_repo>>.git .app-collection
                name: 'architect/push-to-app-collection: Clone app collection repo'
            - run:
                command: |
                    yq eval ".app_version" ".app-collection/flux-manifests/<<parameters.app_name>>.yaml" | tee .app_version_in_collection
                name: 'architect/push-to-app-collection: Fetch current version of the app in the collection'
            - run:
                command: |
                    mkdir -p .app-collection/flux-manifests
                    mv -f .fluxgenerator.yaml .app-collection/flux-manifests/<<parameters.app_name>>.yaml
                    architect create kustomization --dir .app-collection/flux-manifests | tee .app-collection/flux-manifests/kustomization.yaml
                    git -C .app-collection add flux-manifests/
                name: 'architect/push-to-app-collection: Add / update resources to the collection repo'
            - run:
                command: |
                    git -C .app-collection commit -m "update <<parameters.app_name>> to $(cat .app_version_in_project)"
                name: 'architect/push-to-app-collection: Commit changes to the app collection repo'
            - run:
                command: |
                    go install github.com/davidrjonas/semver-cli@1.1.1
                name: 'architect/push-to-app-collection: install github.com/davidrjonas/semver-cli@1.1.1'
            - run:
                command: |
                    if semver-cli greater $(cat .app_version_in_project) $(cat .app_version_in_collection); then
                      echo "[UPDATE] The new app version ($(cat .app_version_in_project)) is greater than the one the collection ($(cat .app_version_in_collection)), pushing update to collection repository..."

                      cd .app-collection

                      ret=1
                      tries=4
                      for i in $(seq 1 $tries) ; do
                        echo "====> Attempt $i: Running: git pull --rebase"
                        git pull --rebase

                        echo "====> Attempt $i: Running: git push"
                        set +e
                        git push
                        ret=$?
                        set -e

                        [[ $ret -eq 0 ]] && exit $ret

                        sleep 5
                      done

                      echo "Giving up after $tries failures." >&2
                      echo "Error pushing changes. See known errors in:" >&2
                      echo "https://github.com/giantswarm/architect-orb/blob/master/README.md#push-to-app-collection" >&2


                      exit $ret
                    else
                      echo "[SKIP] The new app version ($(cat .app_version_in_project)) is lesser or equal than the one the collection ($(cat .app_version_in_collection)), skipping update to collection repository..."
                      exit 0
                    fi
                name: 'architect/push-to-app-collection: Push changes to the app collection repo'
            - run:
                command: |
                    rm .app_version_in_project
                    rm .app_version_in_collection
                name: 'architect/push-to-app-collection: Cleanup'
    run-tests-with-ats:
        parameters:
            additional_app-test-suite_flags:
                default: ""
                description: Additional app-test-suite flags to use
                type: string
            app-test-suite_container_tag:
                description: Container tag of app-test-suite to use (check gsoci.azurecr.io/giantswarm/app-test-suite)
                type: string
            app-test-suite_version:
                description: Version of app-test-suite dats.sh container wrapper to use (git tag or commit)
                type: string
            chart_archive_prefix:
                default: ""
                description: Prefix for the chart archive file to execute tests for.
                type: string
        steps:
            - attach_workspace:
                at: build
            - run:
                command: |
                    wget -O dats.sh "https://raw.githubusercontent.com/giantswarm/app-test-suite/<< parameters.app-test-suite_version >>/dats.sh"
                    chmod +x dats.sh
                name: Download dats.sh script
            - run:
                command: |
                    set -x

                    export DATS_TAG=<< parameters.app-test-suite_container_tag >>
                    # find the chart archive file name
                    chart_archive=$(find build -name "<< parameters.chart_archive_prefix >>*.tgz" -print -quit)
                    # move chart archive from build directory to root
                    # we're doing this to make sure .ats/main.yaml is picked up
                    cp "$chart_archive" "${chart_archive##*/}"

                    # execute dats wrapper
                    ./dats.sh --chart-file "${chart_archive##*/}" << parameters.additional_app-test-suite_flags >>
                name: Execute app-test-suite with dats.sh wrapper
    tools-info:
        parameters:
            show_abs_version:
                default: false
                type: boolean
            show_architect_version:
                default: true
                type: boolean
            show_bash_version:
                default: true
                type: boolean
            show_git_version:
                default: true
                type: boolean
            show_go_version:
                default: true
                type: boolean
            show_helm_version:
                default: true
                type: boolean
        steps:
            - when:
                condition: << parameters.show_architect_version >>
                steps:
                    - run:
                        command: |
                            architect version
                        name: Showing Architect Version
            - when:
                condition: << parameters.show_bash_version >>
                steps:
                    - run:
                        command: |
                            echo $BASH_VERSION
                        name: Showing Bash Version
            - when:
                condition: << parameters.show_git_version >>
                steps:
                    - run:
                        command: |
                            git version
                        name: Showing Git Version
            - when:
                condition: << parameters.show_go_version >>
                steps:
                    - run:
                        command: |
                            go version
                        name: Showing Go Version
            - when:
                condition: << parameters.show_helm_version >>
                steps:
                    - run:
                        command: |
                            helm version -c
                        name: Showing Helm Version
            - when:
                condition: << parameters.show_abs_version >>
                steps:
                    - run:
                        command: |
                            python -m app_build_suite --version
                        name: Showing App Build Suite Version
description: |
    Tools for interactions with Giant Swarm app catalogs and registries. Full orb source
    code: https://github.com/giantswarm/architect-orb.
executors:
    app-build-suite:
        docker:
            - entrypoint: /bin/bash
              image: gsoci.azurecr.io/giantswarm/app-build-suite:1.2.2-circleci
    architect:
        docker:
            - entrypoint: /bin/bash
              image: gsoci.azurecr.io/giantswarm/architect:6.14.0
    gitleaks:
        docker:
            - entrypoint: /bin/bash
              image: gsoci.azurecr.io/giantswarm/gitleaks:v3.3.0
    machine:
        machine: true
jobs:
    changelog-lint:
        description: |
            It checks if CHANGELOG.md file is in format described in
            https://keepachangelog.com/en/1.0.0/.
        executor: architect
        parameters:
            resource_class:
                default: small
                description: |
                    Configures amount CPU and RAM for the job. See
                    https://circleci.com/docs/2.0/configuration-reference/#docker-executor
                    for details.
                enum:
                    - small
                    - medium
                    - medium+
                    - large
                    - xlarge
                type: enum
        resource_class: << parameters.resource_class >>
        steps:
            - checkout
            - changelog-lint
    gitleaks:
        description: Runs the gitleaks tool to search for secrets contained in commits since the last revision.
        executor: gitleaks
        parameters:
            config:
                default: ""
                description: (Optional) Path to a config file to use for gitleaks configuration.
                type: string
            resource_class:
                default: small
                description: |
                    Configures amount CPU and RAM for the job. See
                    https://circleci.com/docs/2.0/configuration-reference/#docker-executor
                    for details.
                enum:
                    - small
                    - medium
                    - medium+
                    - large
                    - xlarge
                type: enum
        resource_class: << parameters.resource_class >>
        steps:
            - checkout
            - gitleaks:
                config: << parameters.config >>
    go-build:
        description: |
            It does everything that go-test
            (https://circleci.com/orbs/registry/orb/giantswarm/architect#jobs-go-test)
            job does and runs `go build` against the codebase on top of that. It injects
            all the variables go-test job does into the produced binary.

            The job produces static binary named after the repository name. It is
            persisted to workspace under "./" path.
        executor: architect
        parameters:
            binary:
                description: Name of the binary produced by the job. It is also persisted to the workspace.
                type: string
            os:
                default: linux
                description: The target Operating System for the binary. Must be one of "linux", "darwin".
                enum:
                    - linux
                    - darwin
                type: enum
            pre_test_target:
                default: ""
                description: |
                    Executes the requested Makefile target before lints and tests. Helpful to generate code in advance.
                type: string
            resource_class:
                default: medium
                description: |
                    Configures amount CPU and RAM for the job. See
                    https://circleci.com/docs/2.0/configuration-reference/#docker-executor
                    for details.
                enum:
                    - small
                    - medium
                    - medium+
                    - large
                    - xlarge
                type: enum
            tags:
                default: ""
                description: |
                    Additional tags to include in -tags flag of go build.
                type: string
            test_target:
                default: ""
                description: |
                    Executes the requested Makefile target.
                type: string
        resource_class: << parameters.resource_class >>
        steps:
            - checkout
            - tools-info
            - go-cache-restore
            - go-build:
                binary: << parameters.binary >>
                os: << parameters.os >>
                pre_test_target: <<parameters.pre_test_target>>
                tags: << parameters.tags >>
                test_target: <<parameters.test_target>>
            - go-cache-save
            - persist_to_workspace:
                paths:
                    - ./<< parameters.binary >>
                root: .
    go-test:
        description: |
            Checks if the code is formatted by `go fmt` and then runs `go vet` and `go
            test` It also injects following variables into the
            "github.com/ORGANIZATION/REPOSITORY/pkg/project" package for testing:

            - "buildTimestamp" in RFC-3339 format in UTC time zone.
            - "gitSHA" SHA of the built commit.
            - "version" produced by `architect project version` command.
        executor: architect
        parameters:
            pre_test_target:
                default: ""
                description: |
                    Executes the requested Makefile target before lints and tests. Helpful to generate code in advance.
                type: string
            resource_class:
                default: medium
                description: |
                    Configures amount CPU and RAM for the job. See
                    https://circleci.com/docs/2.0/configuration-reference/#docker-executor
                    for details.
                enum:
                    - small
                    - medium
                    - medium+
                    - large
                    - xlarge
                type: enum
            test_target:
                default: ""
                description: |
                    Executes the requested Makefile target.
                type: string
        resource_class: << parameters.resource_class >>
        steps:
            - checkout
            - tools-info
            - go-cache-restore
            - go-test:
                pre_test_target: <<parameters.pre_test_target>>
                test_target: <<parameters.test_target>>
            - go-cache-save
    integration-test:
        description: |
            Runs an integration test by creating a KIND cluster and executing it as a Go
            test.

            Uses the machine executor and replaces the Go version with a version
            controlled by us since the preinstalled Go is very outdated.

            See [docs](docs/integration_test.md) for more details.
        executor: machine
        machine:
            image: ubuntu-2004:202010-01
        parameters:
            apptestctl-version:
                default: v0.18.0
                description: apptestctl version for bootstrapping app platform.
                type: string
            env-file:
                default: ""
                description: File of environment variables to set.
                type: string
            helm-version:
                default: v3.6.3
                description: Helm version to install.
                type: string
            install-app-platform:
                default: false
                description: |
                    When true the apptestctl bootstrap command is used to add support for
                    installing components in tests via app CRs.
                type: boolean
            kind-config:
                default: ""
                description: Path to kind config file.
                type: string
            kubernetes-version:
                default: v1.21.1
                description: Kubernetes version for kind cluster.
                type: string
            resource_class:
                default: medium
                description: |
                    Configures amount CPU and RAM for the job. See
                    https://circleci.com/docs/2.0/configuration-reference/#machine-executor-linux
                    for details.
                enum:
                    - medium
                    - large
                    - xlarge
                    - 2xlarge
                type: enum
            setup-script:
                default: ""
                description: Path to setup script with commands to execute before each test.
                type: string
            test-dir:
                description: Tested package directory.
                type: string
            test-timeout:
                default: 20m
                description: If a tests runs longer than this it will panic.
                type: string
        resource_class: << parameters.resource_class >>
        steps:
            - checkout
            - attach_workspace:
                at: .
            - machine-install-go
            - integration-test-install-tools:
                apptestctl-version: << parameters.apptestctl-version >>
                helm-version: << parameters.helm-version >>
                kubernetes-version: << parameters.kubernetes-version >>
            - integration-test-create-cluster:
                kind-config: << parameters.kind-config >>
                kubernetes-version: << parameters.kubernetes-version >>
            - integration-test-install-app-platform:
                install-app-platform: << parameters.install-app-platform >>
            - integration-test-setup:
                setup-script: << parameters.setup-script >>
            - integration-test-go-test:
                env-file: << parameters.env-file >>
                test-dir: << parameters.test-dir >>
                test-timeout: << parameters.test-timeout >>
            - integration-test-export-logs
    push-to-app-catalog:
        executor: << parameters.executor >>
        parameters:
            app_catalog:
                description: Name of the Github repository inside giantswarm organization hosting the App Catalog for tagged builds.
                type: string
            app_catalog_test:
                description: Name of the Github repository inside giantswarm organization hosting the App Catalog for test builds.
                type: string
            attach_workspace:
                default: false
                description: If true, the previously persisted workspace will be attached after checkout.
                type: boolean
            chart:
                description: Name of the chart inside helm directory to push to the App Catalog.
                type: string
            ct_config:
                default: ""
                description: Chart Testing Config file path
                type: string
            executor:
                default: architect
                description: |
                    Allows to select the executor for this job. Selecting `app-build-suite` enables verifying, linting,
                    and packaging through https://github.com/giantswarm/app-build-suite
                    The `app-build-suite` executor also enables metadata generation.
                    Default: `architect`
                enum:
                    - architect
                    - app-build-suite
                type: enum
            explicit_allow_chart_name_mismatch:
                default: false
                description: |
                    If 'explicit_allow_chart_name_mismatch' is set to true, the name of the chart can be anything.
                    Otherwise the name set in the 'chart' parameter must start with the repository name and optionally continue with '-app'.
                type: boolean
            on_tag:
                default: true
                description: |
                    When this is `false`, commits to `master` will be pushed to `app_catalog` instead of `app_catalog_test`.
                    Set this to `false` for deployments that follow a a master branch for production releases rather than
                    using tags (the default).
                type: boolean
            password_envar:
                default: AZURE_CLIENTSECRET
                description: |
                    Required if `push_to_oci_registry` is set to `true`.
                type: string
            persist_chart_archive:
                default: false
                description: |
                    When this is `true`, the packaged chart archive will be persisted to the workspace.
                    Set this to `true`, if you're planning to execute tests using app-test-suite.
                type: boolean
            push_to_appcatalog:
                default: true
                description: |
                    Push the chart to App Catalog git repository if this is `true`.
                type: boolean
            push_to_oci_registry:
                default: true
                description: |
                    Push the chart to OCI registry if this is `true`.
                type: boolean
            registry_url:
                default: giantswarmpublic.azurecr.io
                description: |
                    Base URL of the OCI registry.
                type: string
            resource_class:
                default: small
                description: |
                    Configures amount CPU and RAM for the job. See
                    https://circleci.com/docs/2.0/configuration-reference/#docker-executor
                    for details.
                enum:
                    - small
                    - medium
                    - medium+
                    - large
                    - xlarge
                type: enum
            skip_conftest_deprek8ion:
                default: false
                description: |
                    When this is `true`, checking for deprecated manifest versions will be skipped.
                type: boolean
            username_envar:
                default: AZURE_CLIENTID
                description: |
                    Required if `push_to_oci_registry` is set to `true`.
                type: string
        resource_class: << parameters.resource_class >>
        steps:
            - checkout
            - when:
                condition: << parameters.attach_workspace >>
                steps:
                    - attach_workspace:
                        at: .
            - when:
                condition:
                    equal:
                        - << parameters.executor >>
                        - architect
                steps:
                    - tools-info
                    - prepare-catalogbot-git-ssh
                    - helm-chart-template:
                        chart: << parameters.chart >>
                    - helm-lint:
                        chart: << parameters.chart >>
                        ct_config: << parameters.ct_config >>
                    - kubeconform:
                        chart: << parameters.chart >>
                    - unless:
                        condition: << parameters.skip_conftest_deprek8ion >>
                        steps:
                            - helm-conftest:
                                chart: << parameters.chart >>
                    - when:
                        condition:
                            equal:
                                - << parameters.push_to_appcatalog >>
                                - true
                        steps:
                            - package-and-push-git:
                                app_catalog: << parameters.app_catalog >>
                                app_catalog_test: << parameters.app_catalog_test >>
                                chart: << parameters.chart >>
                                explicit_allow_chart_name_mismatch: << parameters.explicit_allow_chart_name_mismatch >>
                                on_tag: << parameters.on_tag >>
                                persist_chart_archive: << parameters.persist_chart_archive >>
                    - when:
                        condition:
                            equal:
                                - << parameters.push_to_oci_registry >>
                                - true
                        steps:
                            - package-and-push-oci:
                                app_catalog: << parameters.app_catalog >>
                                app_catalog_test: << parameters.app_catalog_test >>
                                chart: << parameters.chart >>
                                explicit_allow_chart_name_mismatch: << parameters.explicit_allow_chart_name_mismatch >>
                                on_tag: << parameters.on_tag >>
                                password_envar: << parameters.password_envar >>
                                persist_chart_archive: << parameters.persist_chart_archive >>
                                registry_url: << parameters.registry_url>>
                                username_envar: << parameters.username_envar >>
            - when:
                condition:
                    equal:
                        - << parameters.executor >>
                        - app-build-suite
                steps:
                    - tools-info:
                        show_abs_version: true
                        show_architect_version: false
                        show_go_version: false
                    - prepare-catalogbot-git-ssh
                    - when:
                        condition:
                            equal:
                                - << parameters.push_to_appcatalog >>
                                - true
                        steps:
                            - package-and-push-git-with-abs:
                                app_catalog: << parameters.app_catalog >>
                                app_catalog_test: << parameters.app_catalog_test >>
                                chart: << parameters.chart >>
                                explicit_allow_chart_name_mismatch: << parameters.explicit_allow_chart_name_mismatch >>
                                on_tag: << parameters.on_tag >>
                                persist_chart_archive: << parameters.persist_chart_archive >>
                                skip_conftest_deprek8ion: << parameters.skip_conftest_deprek8ion >>
                    - when:
                        condition:
                            equal:
                                - << parameters.push_to_oci_registry >>
                                - true
                        steps:
                            - package-and-push-oci-with-abs:
                                app_catalog: << parameters.app_catalog >>
                                app_catalog_test: << parameters.app_catalog_test >>
                                chart: << parameters.chart >>
                                explicit_allow_chart_name_mismatch: << parameters.explicit_allow_chart_name_mismatch >>
                                on_tag: << parameters.on_tag >>
                                password_envar: << parameters.password_envar >>
                                persist_chart_archive: << parameters.persist_chart_archive >>
                                registry_url: << parameters.registry_url>>
                                skip_conftest_deprek8ion: << parameters.skip_conftest_deprek8ion >>
                                username_envar: << parameters.username_envar >>
    push-to-app-collection:
        description: |
            Generates and adds an App CR to an app-collection. Note: version will be detected automatically by architect.
        executor: architect
        parameters:
            app_catalog:
                default: control-plane-catalog
                description: Name of the catalog CR where the application belongs.
                type: string
            app_collection_repo:
                description: Name of the app collection repository.
                type: string
            app_name:
                description: Name of the application.
                type: string
            app_namespace:
                default: giantswarm
                description: Namespace of the application.
                type: string
            disable_force_upgrade:
                default: false
                description: Disable helm chart force upgrade.
                type: boolean
            resource_class:
                default: small
                description: |
                    Configures amount CPU and RAM for the job. See
                    https://circleci.com/docs/2.0/configuration-reference/#docker-executor
                    for details.
                enum:
                    - small
                    - medium
                    - medium+
                    - large
                    - xlarge
                type: enum
        resource_class: << parameters.resource_class >>
        steps:
            - checkout
            - prepare-catalogbot-git-ssh
            - push-to-app-collection:
                app_catalog: <<parameters.app_catalog>>
                app_collection_repo: <<parameters.app_collection_repo>>
                app_name: <<parameters.app_name>>
                app_namespace: <<parameters.app_namespace>>
                disable_force_upgrade: <<parameters.disable_force_upgrade>>
    push-to-registries:
        environment:
            DOCKER_BUILDKIT: "1"
        executor: architect
        parameters:
            build-context:
                default: .
                type: string
            dockerfile:
                default: ./Dockerfile
                type: string
            force-public:
                default: false
                description: Skip the repo visibility check and push the the image to public registries
                type: boolean
            image:
                default: giantswarm/${CIRCLE_PROJECT_REPONAME}
                description: Name of the  container repository and image. Defaults to `giantswarm/REPO_NAME`. Must not contain registry host name!
                type: string
            registries-data:
                default: ""
                type: string
            resource_class:
                default: small
                description: |
                    Configures the amount of CPU and RAM for the job. See
                    https://circleci.com/docs/2.0/configuration-reference/#docker-executor
                    for details.
                enum:
                    - small
                    - medium
                    - medium+
                    - large
                    - xlarge
                type: enum
            tag-latest-branch:
                default: main
                description: Name of the branch on which the image will be additionally tagged as "latest".
                type: string
            tag-suffix:
                default: ""
                type: string
        resource_class: << parameters.resource_class >>
        steps:
            - checkout
            - setup_remote_docker:
                version: default
            - attach_workspace:
                at: .
            - image-prepare-tag:
                tag-suffix: <<parameters.tag-suffix>>
            - image-login-to-registries:
                registries-data: <<parameters.registries-data>>
            - image-build-with-docker:
                build-context: <<parameters.build-context>>
                dockerfile: <<parameters.dockerfile>>
            - image-push-to-registries:
                build-context: <<parameters.build-context>>
                dockerfile: <<parameters.dockerfile>>
                image: <<parameters.image>>
                image-sha256_envvar: DOCKER_IMAGE_SHA256
                registries-data: <<parameters.registries-data>>
                tag-latest-branch: <<parameters.tag-latest-branch>>
                tag-suffix: <<parameters.tag-suffix>>
                tag_envvar: DOCKER_IMAGE_TAG
    run-kat-tests:
        executor: machine
        machine:
            image: ubuntu-2004:202010-01
        parameters:
            additional_kube-app-testing_flags:
                default: ""
                description: Additional kube-app-testing flags to use
                type: string
            chart:
                description: Name of the chart inside helm directory to push to the App Catalog.
                type: string
            cluster_type:
                default: kind
                description: Type of cluster to execute this test on
                type: string
            ct_config:
                default: ""
                description: Chart Testing Config file path
                type: string
            helm-version:
                default: 2.17.0
                type: string
            kind-version:
                default: 0.7.0
                description: 'Version of kind used for cluster_type: kind tests'
                type: string
            kube-app-testing-version:
                default: v0.5.2
                description: Version of kube-app-testing to use
                type: string
            kubectl-version:
                default: 1.18.0
                type: string
            resource_class:
                default: medium
                description: |
                    Configures amount CPU and RAM for the job. See
                    https://circleci.com/docs/2.0/configuration-reference/#machine-executor-linux
                    for details.
                enum:
                    - medium
                    - large
                    - xlarge
                    - 2xlarge
                type: enum
        resource_class: << parameters.resource_class >>
        steps:
            - checkout
            - kat-tests-install-tools:
                helm-version: << parameters.helm-version >>
                kind-version: << parameters.kind-version >>
                kube-app-testing-version: << parameters.kube-app-testing-version >>
                kubectl-version: << parameters.kubectl-version >>
            - kat-tests-run:
                additional_kube-app-testing_flags: << parameters.additional_kube-app-testing_flags >>
                chart: << parameters.chart >>
                cluster_type: << parameters.cluster_type >>
                ct_config: << parameters.ct_config >>
    run-tests-with-ats:
        executor: machine
        machine:
            image: ubuntu-2004:202010-01
        parameters:
            additional_app-test-suite_flags:
                default: ""
                description: Additional app-test-suite flags to use
                type: string
            app-test-suite_container_tag:
                default: 0.5.0
                description: Container tag of app-test-suite to use (check gsoci.azurecr.io/giantswarm/app-test-suite)
                type: string
            app-test-suite_version:
                default: v0.5.0
                description: Version of app-test-suite dabs.sh container wrapper to use (git tag or commit)
                type: string
            chart_archive_prefix:
                default: ""
                description: Prefix for the chart archive file to execute tests for.
                type: string
            resource_class:
                default: medium
                description: |
                    Configures amount CPU and RAM for the job. See
                    https://circleci.com/docs/2.0/configuration-reference/#machine-executor-linux
                    for details.
                enum:
                    - medium
                    - large
                    - xlarge
                    - 2xlarge
                type: enum
        resource_class: << parameters.resource_class >>
        steps:
            - checkout
            - run-tests-with-ats:
                additional_app-test-suite_flags: << parameters.additional_app-test-suite_flags >>
                app-test-suite_container_tag: << parameters.app-test-suite_container_tag >>
                app-test-suite_version: << parameters.app-test-suite_version >>
                chart_archive_prefix: << parameters.chart_archive_prefix >>
version: 2.1

