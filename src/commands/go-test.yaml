parameters:
  path:
    default: "."
    description: |
      The path where the Go package to test is located.
    type: string
  pre_test_target:
    default: ""
    description: |
      Executes the requested Makefile target before lints and tests. Helpful to generate code in advance.
    type: string
  test_target:
    default: ""
    description: |
      Executes the requested Makefile target.
    type: string
steps:
  # We set `CGO_ENABLED=0` because the `architect` Docker image does not have a C compiler. Most cases
  # should work without cgo.

  - when:
      condition: <<parameters.pre_test_target>>
      steps:
        - run:
            name: Run pre-test Makefile target
            environment:
              CGO_ENABLED: "0"
            command: |
              make <<parameters.pre_test_target>>
  - run:
      name: Check if go.mod and go.sum are clean
      command: |
        go mod tidy && git diff --exit-code

  - run:
      name: Create ldflags file
      command: |
        echo -n "-s -w -linkmode 'auto' -extldflags '-static'" > .ldflags

        # buildTimestamp
        echo -n " -X '$(go list "<<parameters.path>>")/pkg/project.buildTimestamp=$(date --utc '+%FT%TZ')'" >> .ldflags

        # Commit SHA
        echo -n " -X '$(go list "<<parameters.path>>")/pkg/project.gitSHA=${CIRCLE_SHA1}'" >> .ldflags

        # Print content
        echo "\"$(cat .ldflags)\""

  - run:
      name: Check for non-ASCII characters in file names
      command: |
        checked=0
        non_ascii=0
        for entry in $(find -L)
        do
          checked=$((checked+1))
          if [[ "$entry" = *[![:ascii:]]* ]]; then
            non_ascii=$((non_ascii+1))
            echo "Found non-ASCII characters in filename: $entry"
          fi
        done
        echo "Found $non_ascii non-ASCII filenames in $checked files."
        exit $non_ascii
  - run:
      name: Check if imports are properly sorted
      command: |
        go install golang.org/x/tools/cmd/goimports@latest && \
        if [[ -n $(goimports -local github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} -l .) ]];
        then
          goimports -local github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} -d . && exit 1;
        fi
  - run:
      name: Check if code structure differs from gofmt's
      command: |
        test -z $(gofmt -l .) || gofmt -d .
  - when:
      condition: <<parameters.test_target>>
      steps:
        - run:
            name: Run unit tests via Makefile target
            environment:
              CGO_ENABLED: "0"
            command: |
              make <<parameters.test_target>>
  - unless:
      condition: <<parameters.test_target>>
      steps:
        - run:
            name: Run unit tests
            environment:
              CGO_ENABLED: "0"
            command: |
              go test -ldflags "$(cat .ldflags)" ./...
  - run:
      name: Check if dependencies have known security vulnerabilities
      environment:
        CGO_ENABLED: "0"
      command: |
        set +e
        go list -json -deps ./... \
          | nancy sleuth --skip-update-check \
            --quiet --exclude-vulnerability-file ./.nancy-ignore \
            --additional-exclude-vulnerability-files ./.nancy-ignore.generated 2>&1 \
            | tee ./nancy-results.txt ; nancy_result=(${PIPESTATUS[1]})
        grep -q 'error accessing OSS Index' nancy-results.txt; grep_result=$?
        set -e
        # If nancy gave us a bad exit code AND grep found an OSS index error in the output, then we don't fail the build.
        if [[ $nancy_result -ne 0 && $grep_result -eq 0 ]]; then
          echo Ignoring failed scan due to problem with the external scanner.
          exit 0
        fi
        exit $nancy_result
