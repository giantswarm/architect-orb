description: >
  Generates and adds an App CR to an app-collection.
  Note: version will be detected automatically by architect.
parameters:
  app_name:
    type: "string"
  app_namespace:
    type: "string"
  app_catalog:
    type: "string"
  app_collection_repo:
    type: "string"
  disable_force_upgrade:
    type: "boolean"
steps:
  - run:
      name: "architect/push-to-app-collection: Generate version"
      command: |
        architect project version | tee .app_version_in_project
  - run:
      name: "architect/push-to-app-collection: Clone app collection repo"
      command: |
        git clone -q --depth=1 --single-branch git@github.com:giantswarm/<<parameters.app_collection_repo>>.git .app-collection
  - run:
      name: "architect/push-to-app-collection: Fetch current version of the app in the collection"
      command: |
        if [ ! -f .app-collection/kustomize/<<parameters.app_name>>.yaml ]; then
          echo "0.0.0" | tee .app_version_in_collection
        else
          yq eval ".spec.version" ".app-collection/kustomize/<<parameters.app_name>>.yaml" | tee .app_version_in_collection
        fi
  - run:
      name: "architect/push-to-app-collection: Add / update resources to the collection repo"
      command: |
        mkdir -p .app-collection/kustomize

        if [[ -f .app-collection/kustomize/<<parameters.app_name>>.yaml ]]; then
            yq -i ".spec.version = \"$(head -n 1 .app_version_in_project)\"" .app-collection/kustomize/<<parameters.app_name>>.yaml
        else
            cat > .app-collection/kustomize/<<parameters.app_name>>.yaml \<<EOF
        apiVersion: application.giantswarm.io/v1alpha1
        kind: App
        metadata:
          annotations:
            chart-operator.giantswarm.io/force-helm-upgrade: "true"
          labels:
            app-operator.giantswarm.io/version: 0.0.0
          name: <<parameters.app_name>>
          namespace: giantswarm
        spec:
          catalog: <<parameters.app_catalog>>
          config:
            configMap:
              name: <<parameters.app_name>>-konfiguration
              namespace: giantswarm
            secret:
              name: <<parameters.app_name>>-konfiguration
              namespace: giantswarm
          kubeConfig:
            inCluster: true
          name: <<parameters.app_name>>
          namespace: <<parameters.app_namespace>>
          version: $(head -n 1 .app_version_in_project)
        EOF

          if [[ "<<parameters.disable_force_upgrade>>" == "true" ]]; then
            yq -i 'del(.metadata.annotations."chart-operator.giantswarm.io/force-helm-upgrade")' .app-collection/kustomize/<<parameters.app_name>>.yaml
          fi

          # MCC
          if [[ -f ".app-collection/kustomize/konfiguration.yaml" ]]; then
            yq -i '.spec.configuration.applications.includes.exactMatchers = (.spec.configuration.applications.includes.exactMatchers + "<<parameters.app_name>>" | sort)' ".app-collection/kustomize/konfiguration.yaml"
          else
            echo "Management Cluster konfiguration file - konfiguration.yaml - does not exist, skipping updating it..."
          fi

          # KFG
          if [[ -f ".app-collection/kustomize/konfiguration.v2.yaml" ]]; then
            yq '.spec.targets.iterations.<<parameters.app_name>> = {"variables": [{"name": "app", "value": "<<parameters.app_name>>"}]} | sortKeys(.spec.targets.iterations)' ".app-collection/kustomize/konfiguration.v2.yaml"
          else
            echo "Generic konfiguration file - konfiguration.v2.yaml - does not exist, skipping updating it..."
          fi

          architect create kustomization --generators=false --dir .app-collection/kustomize | tee .app-collection/kustomize/kustomization.yaml
        fi

        git -C .app-collection add kustomize/
  - run:
      name: "architect/push-to-app-collection: Commit changes to the app collection repo"
      command: |
        git -C .app-collection commit -m "update <<parameters.app_name>> to $(cat .app_version_in_project)"
  - run:
      name: "architect/push-to-app-collection: install github.com/davidrjonas/semver-cli@1.1.1"
      command: |
        go install github.com/davidrjonas/semver-cli@1.1.1
  - run:
      name: "architect/push-to-app-collection: Push changes to the app collection repo"
      command: |
          if semver-cli greater $(cat .app_version_in_project) $(cat .app_version_in_collection); then
            echo "[UPDATE] The new app version ($(cat .app_version_in_project)) is greater than the one the collection ($(cat .app_version_in_collection)), pushing update to collection repository..."

            cd .app-collection

            ret=1
            tries=4
            for i in $(seq 1 $tries) ; do
              echo "====> Attempt $i: Running: git pull --rebase"
              git pull --rebase

              echo "====> Attempt $i: Running: git push"
              set +e
              git push
              ret=$?
              set -e

              [[ $ret -eq 0 ]] && exit $ret

              sleep 5
            done

            echo "Giving up after $tries failures." >&2
            echo "Error pushing changes. See known errors in:" >&2
            echo "https://github.com/giantswarm/architect-orb/blob/master/README.md#push-to-app-collection" >&2


            exit $ret
          else
            echo "[SKIP] The new app version ($(cat .app_version_in_project)) is lesser or equal than the one the collection ($(cat .app_version_in_collection)), skipping update to collection repository..."
            exit 0
          fi
  - run:
      name: "architect/push-to-app-collection: Cleanup"
      command: |
        rm .app_version_in_project
        rm .app_version_in_collection
