description: >
  Generates and adds an App CR to an app-collection.
  Note: version will be detected automatically by architect.
parameters:
  app_name:
    type: "string"
  app_namespace:
    type: "string"
  app_catalog:
    type: "string"
  app_collection_repo:
    type: "string"
  disable_force_upgrade:
    type: "boolean"
  user_configmap_name:
    description: "Name of the app user config configmap."
    type: "string"
    default: ""
  user_configmap_path:
    description: "Path of the app user config configmap."
    type: "string"
    default: ""
  user_secret_name:
    description: "Name of the app user config secret."
    type: "string"
    default: ""
  user_secret_path:
    description: "Path of the app user config secret."
    type: "string"
    default: ""
steps:
  - run:
      name: Generate version
      command: |
        architect project version | tee .version
  - run:
      name: Generate app CR <<parameters.app_namespace>>/<<parameters.app_name>> for <<parameters.app_catalog>>
      command: |
        architect create appcr \
          --name "<<parameters.app_name>>-unique" \
          --app-name "<<parameters.app_name>>" \
          --app-namespace "<<parameters.app_namespace>>" \
          --app-version "$(cat .version)" \
          --catalog "<<parameters.app_catalog>>" \
          --disable-force-upgrade=<<parameters.disable_force_upgrade>> \
          --user-configmap-name "<<parameters.user_configmap_name>>" \
          --user-secret-name "<<parameters.user_secret_name>>" \
          -o yaml | tee .app.yaml
  - run:
      name: Clone <<parameters.app_collection_repo>>
      command: |
        git clone -q --depth=1 --single-branch -b master git@github.com:giantswarm/<<parameters.app_collection_repo>>.git .app-collection
  - run:
      name: Clean previous app CRs for <<parameters.app_name>> in <<parameters.app_collection_repo>>
      command: |
        cd .app-collection && git rm --ignore-unmatch helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-*.yaml
  - run:
      name: Add app into <<parameters.app_collection_repo>>
      command: |
        mkdir -p .app-collection/helm/<<parameters.app_collection_repo>>-chart/templates
        mv -n .app.yaml .app-collection/helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-unique.yaml
        git -C .app-collection add helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-unique.yaml
  - when:
      condition:
        and:
        - <<parameters.user_configmap_name>>
        - <<parameters.user_configmap_path>>
      steps:
        - run:
            name: Add user configmap <<parameters.user_configmap_path>> into <<parameters.app_collection_repo>>
            command: |
              mv -n <<parameters.user_configmap_path>> .app-collection/helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-unique.user_configmap.yaml
              git -C .app-collection add helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-unique.user_configmap.yaml
  - when:
      condition:
        and:
        - <<parameters.user_secret_name>>
        - <<parameters.user_secret_path>>
      steps:
        - run:
            name: Add user secret <<parameters.user_secret_path>> into <<parameters.app_collection_repo>>
            command: |
              mv -n <<parameters.user_secret_path>> .app-collection/helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-unique.user_secret.yaml
              git -C .app-collection add helm/<<parameters.app_collection_repo>>-chart/templates/<<parameters.app_name>>-unique.user_secret.yaml
  - run:
      name: Commit changes
      command: |
        cd .app-collection && git commit -m "update <<parameters.app_name>>-unique to $(cat .version)"
  - run:
      name: Push to app collection repo
      command: |
          cd .app-collection

          ret=1
          tries=4
          for i in $(seq 1 $tries) ; do
            echo "====> Attempt $i: Running: git pull --rebase"
            git pull --rebase

            echo "====> Attempt $i: Running: git push"
            set +e
            git push
            ret=$?
            set -e

            [[ $ret -eq 0 ]] && exit $ret

            sleep 5
          done

          echo "Giving up after $tries failures." >&2
          echo "Error pushing changes. See known errors in:" >&2
          echo "https://github.com/giantswarm/architect-orb/blob/master/README.md#push-to-app-collection" >&2

          exit $ret
  - run:
      name: Cleanup
      command: |
        rm .version
