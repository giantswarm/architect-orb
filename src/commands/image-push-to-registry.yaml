parameters:
  image-sha256_envvar:
    type: "env_var_name"
  registry:
    type: string
  image:
    type: "string"
  tag_envvar:
    type: "env_var_name"
  password_envvar:
    type: "env_var_name"
  username_envvar:
    type: "env_var_name"
  tag-latest-branch:
    type: "string"
  tag-suffix:
    type: "string"
    default: ""
  build-context:
    type: "string"
    default: "."
  dockerfile:
    type: "string"
    default: "./Dockerfile"
  push-dev:
    type: boolean
    default: false
  private-registries:
    description: |
      A list of registries that can be used for storing
      private container images.
      Use whitespaces to separate
      `quay.io docker.io ...`
    type: string
    default: quay.io
  force-public:
    type: boolean
    default: false
steps:
  - run:
      name: Push image to <<parameters.registry>>
      command: |
        # -- TODO(@allanger) jq should be pre-installed in the base image
        apk update && apk add jq

        # If image is forced to be pushed as a public one,
        # we shouldn't check whether the source is public
        if [[ "<< parameters.force-public >>" == "false" ]]; then
          # If repo with the source code is private,
          # image is supposed to be pushed as private
          GITHUB_API_URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
          GITHUB_MESSAGE=$(curl -sL -H "Accept: application/vnd.github+json" -H "X-Github-Api-Version: 2022-11-28" "${GITHUB_API_URL}" | jq -r '.message')
          if [ "${GITHUB_MESSAGE}" = "Not Found" ]; then
            echo "Repo is not public, pushing the image as private"
            if ! [[ "<< parameters.private-registries >>" =~ .*"<< parameters.registry>>".* ]]; then
              echo "The registry << parameters.registry >> is not configured for storing private images. Exiting."
              exit 0
            fi
          fi
        else
            echo "'force-public' flag is set to 'true', not detecting GitHub repo access permissions and pushing the image as  'public'."
        fi

        if [[ "<<parameters.push-dev>>" == "false" ]] && [[ "${DOCKER_IMAGE_TAG}" =~ [a-f0-9]{40} ]]; then
          echo "Not uploading image with tag ${DOCKER_IMAGE_TAG}, as  'push-dev' is 'false'"
          exit 0
        fi
        echo "Authenticate"
        CMD="echo -n \"${<<parameters.password_envvar>>}\" | docker login --username \"${<<parameters.username_envvar>>}\" --password-stdin \"<<parameters.registry>>\""
        for i in {1..3}; do [[ $i -gt 1 ]] && sleep 1;  eval "${CMD}" && s=0 && break || s=$?; done; (exit $s)

        echo "Tag the image for <<parameters.registry>>"
        docker tag "${<<parameters.image-sha256_envvar>>}" "<<parameters.registry>>/<<parameters.image>>:${<<parameters.tag_envvar>>}"

        echo "Pushing image with SHA256 ${<<parameters.image-sha256_envvar>>} as <<parameters.registry>>/<<parameters.image>>:${<<parameters.tag_envvar>>}"
        CMD="docker push \"<<parameters.registry>>/<<parameters.image>>:${<<parameters.tag_envvar>>}\""
        for i in {1..3}; do [[ $i -gt 1 ]] && sleep 1;  eval "${CMD}" && s=0 && break || s=$?; done; (exit $s)

        if [[ "<<parameters.tag-latest-branch>>" == "${CIRCLE_BRANCH}" ]]; then
          echo "Tagging the image as 'latest'"
          docker tag "${<<parameters.image-sha256_envvar>>}" "<<parameters.registry>>/<<parameters.image>>:latest<<parameters.tag-suffix>>"
          CMD="docker push \"<<parameters.registry>>/<<parameters.image>>:latest<<parameters.tag-suffix>>\""
          for i in {1..3}; do [[ $i -gt 1 ]] && sleep 1;  eval "${CMD}" && s=0 && break || s=$?; done; (exit $s)
        fi
