parameters:
  image-sha256_envvar:
    type: "env_var_name"
  registry:
    type: string
  image:
    type: "string"
  tag_envvar:
    type: "env_var_name"
  password_envvar:
    type: "env_var_name"
  username_envvar:
    type: "env_var_name"
  tag-latest-branch:
    type: "string"
  tag-suffix:
    type: "string"
    default: ""
  build-context:
    type: "string"
    default: "."
  dockerfile:
    type: "string"
    default: "./Dockerfile"
  push-dev:
    type: boolean
    default: false
steps:
  - run:
      name: Push image to <<parameters.registry>>
      command: |
        if [[ "<<parameters.push-dev>>" == "false" ]] && [[ "${DOCKER_IMAGE_TAG}" =~ [a-f0-9]{40} ]]; then
          echo "Not uploading image with tag ${DOCKER_IMAGE_TAG}, as  'push-dev' is 'false'"
          exit 0
        fi
        echo "Authenticate"
        CMD="echo -n \"${<<parameters.password_envvar>>}\" | docker login --username \"${<<parameters.username_envvar>>}\" --password-stdin \"<<parameters.registry>>\""
        for i in {1..3}; do [[ $i -gt 1 ]] && sleep 1;  eval "${CMD}" && s=0 && break || s=$?; done; (exit $s)

        echo "Tag the image for <<parameters.registry>>"
        docker tag "${<<parameters.image-sha256_envvar>>}" "<<parameters.registry>>/<<parameters.image>>:${<<parameters.tag_envvar>>}"

        echo "Pushing image with SHA256 ${<<parameters.image-sha256_envvar>>} as <<parameters.registry>>/<<parameters.image>>:${<<parameters.tag_envvar>>}"
        CMD="docker push \"<<parameters.registry>>/<<parameters.image>>:${<<parameters.tag_envvar>>}\""
        for i in {1..3}; do [[ $i -gt 1 ]] && sleep 1;  eval "${CMD}" && s=0 && break || s=$?; done; (exit $s)

        if [[ "<<parameters.tag-latest-branch>>" == "${CIRCLE_BRANCH}" ]]; then
          echo "Tagging the image as 'latest'"
          docker tag "${<<parameters.image-sha256_envvar>>}" "<<parameters.registry>>/<<parameters.image>>:latest<<parameters.tag-suffix>>"
          CMD="docker push \"<<parameters.registry>>/<<parameters.image>>:latest<<parameters.tag-suffix>>\""
          for i in {1..3}; do [[ $i -gt 1 ]] && sleep 1;  eval "${CMD}" && s=0 && break || s=$?; done; (exit $s)
        fi
