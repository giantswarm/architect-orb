parameters:
  app_catalog:
    description: "Name of the Github repository inside giantswarm organization hosting the App Catalog for tagged builds."
    type: "string"
  app_catalog_test:
    description: "Name of the Github repository inside giantswarm organization hosting the App Catalog for test builds."
    type: "string"
  attach_workspace:
    description: "If true, the previously persisted workspace will be attached after checkout."
    type: "boolean"
    default: false
  chart:
    description: "Name of the chart inside helm directory to push to the App Catalog."
    type: "string"
  explicit_allow_chart_name_mismatch:
    type: boolean
    default: false
    description: |
      If 'explicit_allow_chart_name_mismatch' is set to true, the name of the chart can be anything.
      Otherwise the name set in the 'chart' parameter must start with the repository name and optionally continue with '-app'.
  ct_config:
    description: "Chart Testing Config file path"
    type: "string"
    default: ""
  on_tag:
    type: boolean
    default: true
    description: |
      When this is `false`, commits to `master` will be pushed to `app_catalog` instead of `app_catalog_test`.
      Set this to `false` for deployments that follow a a master branch for production releases rather than
      using tags (the default).
  executor:
    type: "enum"
    enum: ["architect", "app-build-suite"]
    default: "architect"
    description: |
      Allows to select the executor for this job. Selecting `app-build-suite` enables verifying, linting,
      and packaging through https://github.com/giantswarm/app-build-suite
      The `app-build-suite` executor also enables metadata generation.
      Default: `architect`
  push_to_appcatalog:
    default: true
    description: |
      Push the chart to App Catalog git repository if this is `true`.
    type: boolean
  push_to_oci_registry:
    default: true
    description: |
      Push the chart to OCI registry if this is `true`.
    type: boolean
  registry_url:
    type: "string"
    default: "giantswarmpublic.azurecr.io"
    description: |
      Base URL of the OCI registry.
  resource_class:
    default: "small"
    description: |
        Configures amount CPU and RAM for the job. See
        https://circleci.com/docs/2.0/configuration-reference/#docker-executor
        for details.
    type: "enum"
    enum: ["small", "medium", "medium+", "large", "xlarge"]
  skip_conftest_deprek8ion:
    type: boolean
    default: false
    description: |
      When this is `true`, checking for deprecated manifest versions will be skipped.
  persist_chart_archive:
    type: boolean
    default: false
    description: |
      When this is `true`, the packaged chart archive will be persisted to the workspace.
      Set this to `true`, if you're planning to execute tests using app-test-suite.
  password_envar:
    default: AZURE_CLIENTSECRET
    description: |
      Required if `push_to_oci_registry` is set to `true`.
    type: "string"
  username_envar:
    default: AZURE_CLIENTID
    description: |
      Required if `push_to_oci_registry` is set to `true`.
    type: "string"
executor: "<< parameters.executor >>"
resource_class: "<< parameters.resource_class >>"
steps:
  - unless:
      condition: << parameters.explicit_allow_chart_name_mismatch >>
      steps:
        - run:
            name: "architect/push-to-app-catalog: Verify chart name"
            command: |
              CHART_NAME="<< parameters.chart >>"
              [[ ${CHART_NAME%-app} == ${CIRCLE_PROJECT_REPONAME%-app} ]] && exit 0 || echo "chart parameter value should match ${CIRCLE_PROJECT_REPONAME%-app} or ${CIRCLE_PROJECT_REPONAME%-app}-app" ; exit 1
  - checkout
  - when:
      condition:
        equal: ["<< parameters.executor >>", "architect"]
      steps:
        - tools-info
  - when:
      condition:
        equal: ["<< parameters.executor >>", "app-build-suite"]
      steps:
        - tools-info:
            show_architect_version: false
            show_go_version: false
            show_abs_version: true
  - determine-catalog-name:
      app_catalog: << parameters.app_catalog >>
      app_catalog_test: << parameters.app_catalog_test >>
      on_tag: << parameters.on_tag >>
  - when:
      condition: << parameters.attach_workspace >>
      steps:
        - attach_workspace:
            at: .
  - when:
      condition:
        equal: ["<< parameters.executor >>", "architect"]
      steps:
        - helm-chart-template:
            chart: << parameters.chart >>
        - helm-lint:
            chart: "<< parameters.chart >>"
            ct_config: "<< parameters.ct_config >>"
        - kubeconform:
            chart: << parameters.chart >>
        - unless:
            condition: << parameters.skip_conftest_deprek8ion >>
            steps:
              - helm-conftest:
                  chart: "<< parameters.chart >>"
        - run:
            name: "architect/push-to-app-catalog: Package the chart archive with helm"
            command: |
              mkdir build && helm package ./helm/<< parameters.chart >> --destination ./build
  - when:
      condition:
        equal: ["<< parameters.executor >>", "app-build-suite"]
      steps:
        - kubeconform:
            chart: << parameters.chart >>
        - unless:
            condition: << parameters.skip_conftest_deprek8ion >>
            steps:
              - helm-conftest:
                  chart: "<< parameters.chart >>"
        - run:
            name: "architect/package-helm-with-abs: Execute App Build Suite"
            command: |
              mkdir build && python -m app_build_suite --chart-dir ./helm/<< parameters.chart >> --destination build --generate-metadata --catalog-base-url "https://giantswarm.github.io/$(cat .app_catalog_name)/" --keep-chart-changes
  - push-helm:
      push_to_appcatalog: << parameters.push_to_appcatalog >>
      push_to_oci_registry: << parameters.push_to_oci_registry >>
      password_envar: << parameters.password_envar >>
      username_envar: << parameters.username_envar >>
      registry_url: << parameters.registry_url>>
      chart: << parameters.chart >>
  - when:
      condition: << parameters.persist_chart_archive >>
      steps:
        - persist_to_workspace:
            root: build
            paths:
              - "<< parameters.chart >>*.tgz"
